from sklearn.metrics import confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt

def evaluate_model(y_true, y_pred, model_name):
    """Evaluate the model and print metrics."""
    print(f"Evaluation for {model_name}:")
    print(classification_report(y_true, y_pred))

    # Confusion matrix
    cm = confusion_matrix(y_true, y_pred)
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
    plt.title(f"Confusion Matrix for {model_name}")
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.show()

if __name__ == "__main__":
    from train import train_random_forest, train_lstm
    from preprocessing import preprocess_data
    from feature_extraction import extract_features

    data_path = "data/UCI HAR Dataset"
    X, y = preprocess_data(data_path)
    X_scaled = extract_features(X)

    # Train and evaluate Random Forest
    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
    rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
    rf_model.fit(X_train, y_train)
    y_pred_rf = rf_model.predict(X_test)
    evaluate_model(y_test, y_pred_rf, "Random Forest")

    # Train and evaluate LSTM
    X_lstm = X_scaled.reshape((X_scaled.shape[0], 1, X_scaled.shape[1]))
    X_train_lstm, X_test_lstm, y_train_lstm, y_test_lstm = train_test_split(X_lstm, y, test_size=0.2, random_state=42)
    y_train_lstm = tf.keras.utils.to_categorical(y_train_lstm - 1, num_classes=6)
    y_test_lstm = tf.keras.utils.to_categorical(y_test_lstm - 1, num_classes=6)

    lstm_model = Sequential()
    lstm_model.add(LSTM(64, input_shape=(X_train_lstm.shape[1], X_train_lstm.shape[2])))
    lstm_model.add(Dropout(0.5))
    lstm_model.add(Dense(64, activation="relu"))
    lstm_model.add(Dense(6, activation="softmax"))

    lstm_model.compile(loss="categorical_crossentropy", optimizer="adam", metrics=["accuracy"])
    lstm_model.fit(X_train_lstm, y_train_lstm, epochs=10, batch_size=32, validation_data=(X_test_lstm, y_test_lstm))

    y_pred_lstm = np.argmax(lstm_model.predict(X_test_lstm), axis=1)
    y_test_lstm = np.argmax(y_test_lstm, axis=1)
    evaluate_model(y_test_lstm, y_pred_lstm, "LSTM")
